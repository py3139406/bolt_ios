//
//  RCBikeFill3.swift
//  ProjectName
//
//  Created By Anshul Jain on 25-March-2019
//  Copyright Â© Roadcast Tech Solutions Private Limited
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class RCBikeFill3 : NSObject {

    //// Drawing Methods

    @objc public dynamic class func drawImageWith(_ color:UIColor) -> Void {
        RCBikeFill3.drawCanvas1(frame: CGRect.init(x: 0, y: 0, width: 234, height: 543), resizing: .aspectFill, color: color)
    }
    

    @objc public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 281, height: 543), resizing: ResizingBehavior = .aspectFit, color:UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 281, height: 543), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 281, y: resizedFrame.height / 543)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor3 = color

        //// XMLID_1_
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 140.7, y: 543.1))
        bezierPath.addLine(to: CGPoint(x: 140.7, y: 543.1))
        bezierPath.addCurve(to: CGPoint(x: 114.5, y: 516.9), controlPoint1: CGPoint(x: 126.3, y: 543.1), controlPoint2: CGPoint(x: 114.5, y: 531.3))
        bezierPath.addLine(to: CGPoint(x: 114.5, y: 447.8))
        bezierPath.addCurve(to: CGPoint(x: 140.7, y: 421.6), controlPoint1: CGPoint(x: 114.5, y: 433.4), controlPoint2: CGPoint(x: 126.3, y: 421.6))
        bezierPath.addLine(to: CGPoint(x: 140.7, y: 421.6))
        bezierPath.addCurve(to: CGPoint(x: 166.9, y: 447.8), controlPoint1: CGPoint(x: 155.1, y: 421.6), controlPoint2: CGPoint(x: 166.9, y: 433.4))
        bezierPath.addLine(to: CGPoint(x: 166.9, y: 516.9))
        bezierPath.addCurve(to: CGPoint(x: 140.7, y: 543.1), controlPoint1: CGPoint(x: 166.9, y: 531.3), controlPoint2: CGPoint(x: 155.1, y: 543.1))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 153.1, y: 520.8))
        bezier2Path.addLine(to: CGPoint(x: 128.2, y: 520.8))
        bezier2Path.addCurve(to: CGPoint(x: 105.6, y: 498.2), controlPoint1: CGPoint(x: 115.8, y: 520.8), controlPoint2: CGPoint(x: 105.6, y: 510.6))
        bezier2Path.addLine(to: CGPoint(x: 105.6, y: 444.2))
        bezier2Path.addCurve(to: CGPoint(x: 128.2, y: 421.6), controlPoint1: CGPoint(x: 105.6, y: 431.8), controlPoint2: CGPoint(x: 115.8, y: 421.6))
        bezier2Path.addLine(to: CGPoint(x: 153.1, y: 421.6))
        bezier2Path.addCurve(to: CGPoint(x: 175.7, y: 444.2), controlPoint1: CGPoint(x: 165.5, y: 421.6), controlPoint2: CGPoint(x: 175.7, y: 431.8))
        bezier2Path.addLine(to: CGPoint(x: 175.7, y: 498.2))
        bezier2Path.addCurve(to: CGPoint(x: 153.1, y: 520.8), controlPoint1: CGPoint(x: 175.7, y: 510.6), controlPoint2: CGPoint(x: 165.6, y: 520.8))
        bezier2Path.close()
        fillColor2.setFill()
        bezier2Path.fill()


        //// XMLID_2_ Drawing
        let xMLID_2_Path = UIBezierPath()
        xMLID_2_Path.move(to: CGPoint(x: 104.5, y: 15.7))
        xMLID_2_Path.addCurve(to: CGPoint(x: 176.8, y: 15.7), controlPoint1: CGPoint(x: 104.5, y: 15.7), controlPoint2: CGPoint(x: 141.4, y: -19.7))
        xMLID_2_Path.addCurve(to: CGPoint(x: 104.5, y: 15.7), controlPoint1: CGPoint(x: 176.8, y: 15.7), controlPoint2: CGPoint(x: 149.7, y: 39.9))
        xMLID_2_Path.close()
        fillColor2.setFill()
        xMLID_2_Path.fill()


        //// XMLID_20_ Drawing
        let xMLID_20_Path = UIBezierPath()
        xMLID_20_Path.move(to: CGPoint(x: 242.6, y: 86.1))
        xMLID_20_Path.addLine(to: CGPoint(x: 147.1, y: 40.6))
        xMLID_20_Path.addCurve(to: CGPoint(x: 142.9, y: 38.6), controlPoint1: CGPoint(x: 145.9, y: 39.5), controlPoint2: CGPoint(x: 144.4, y: 38.9))
        xMLID_20_Path.addLine(to: CGPoint(x: 134, y: 34.4))
        xMLID_20_Path.addCurve(to: CGPoint(x: 122.9, y: 38.5), controlPoint1: CGPoint(x: 129.8, y: 32.5), controlPoint2: CGPoint(x: 124.8, y: 34.3))
        xMLID_20_Path.addCurve(to: CGPoint(x: 123.3, y: 46.2), controlPoint1: CGPoint(x: 121.7, y: 41.1), controlPoint2: CGPoint(x: 122, y: 43.9))
        xMLID_20_Path.addLine(to: CGPoint(x: 121.2, y: 47.2))
        xMLID_20_Path.addLine(to: CGPoint(x: 121.2, y: 47.2))
        xMLID_20_Path.addLine(to: CGPoint(x: 121.2, y: 47.2))
        xMLID_20_Path.addLine(to: CGPoint(x: 38.3, y: 86.1))
        xMLID_20_Path.addCurve(to: CGPoint(x: 34.2, y: 97.2), controlPoint1: CGPoint(x: 34.1, y: 88), controlPoint2: CGPoint(x: 32.3, y: 93))
        xMLID_20_Path.addCurve(to: CGPoint(x: 45.3, y: 101.3), controlPoint1: CGPoint(x: 36.1, y: 101.4), controlPoint2: CGPoint(x: 41.1, y: 103.2))
        xMLID_20_Path.addLine(to: CGPoint(x: 121.2, y: 65.6))
        xMLID_20_Path.addLine(to: CGPoint(x: 121.2, y: 75.2))
        xMLID_20_Path.addCurve(to: CGPoint(x: 81.4, y: 149.4), controlPoint1: CGPoint(x: 98, y: 85.9), controlPoint2: CGPoint(x: 81.4, y: 115.1))
        xMLID_20_Path.addCurve(to: CGPoint(x: 105.7, y: 246.5), controlPoint1: CGPoint(x: 81.4, y: 175.5), controlPoint2: CGPoint(x: 91, y: 217.2))
        xMLID_20_Path.addCurve(to: CGPoint(x: 83.3, y: 341.7), controlPoint1: CGPoint(x: 92.1, y: 263.3), controlPoint2: CGPoint(x: 83.3, y: 293.5))
        xMLID_20_Path.addCurve(to: CGPoint(x: 83.3, y: 344.8), controlPoint1: CGPoint(x: 83.3, y: 342.7), controlPoint2: CGPoint(x: 83.3, y: 343.8))
        xMLID_20_Path.addCurve(to: CGPoint(x: 68.4, y: 388.5), controlPoint1: CGPoint(x: 74, y: 357), controlPoint2: CGPoint(x: 68.4, y: 372.1))
        xMLID_20_Path.addLine(to: CGPoint(x: 68.4, y: 422.5))
        xMLID_20_Path.addCurve(to: CGPoint(x: 140.7, y: 494.8), controlPoint1: CGPoint(x: 68.4, y: 462.2), controlPoint2: CGPoint(x: 100.9, y: 494.8))
        xMLID_20_Path.addLine(to: CGPoint(x: 140.7, y: 494.8))
        xMLID_20_Path.addCurve(to: CGPoint(x: 213, y: 422.5), controlPoint1: CGPoint(x: 180.4, y: 494.8), controlPoint2: CGPoint(x: 213, y: 462.3))
        xMLID_20_Path.addLine(to: CGPoint(x: 213, y: 388.5))
        xMLID_20_Path.addCurve(to: CGPoint(x: 198.1, y: 344.8), controlPoint1: CGPoint(x: 213, y: 372.1), controlPoint2: CGPoint(x: 207.4, y: 356.9))
        xMLID_20_Path.addCurve(to: CGPoint(x: 198.1, y: 341.7), controlPoint1: CGPoint(x: 198.1, y: 343.8), controlPoint2: CGPoint(x: 198.1, y: 342.7))
        xMLID_20_Path.addCurve(to: CGPoint(x: 175.7, y: 246.5), controlPoint1: CGPoint(x: 198.1, y: 293.5), controlPoint2: CGPoint(x: 189.3, y: 263.3))
        xMLID_20_Path.addCurve(to: CGPoint(x: 200, y: 149.4), controlPoint1: CGPoint(x: 190.4, y: 217.3), controlPoint2: CGPoint(x: 200, y: 175.5))
        xMLID_20_Path.addCurve(to: CGPoint(x: 158.1, y: 74.3), controlPoint1: CGPoint(x: 200, y: 114), controlPoint2: CGPoint(x: 182.3, y: 84.1))
        xMLID_20_Path.addLine(to: CGPoint(x: 158.1, y: 64.4))
        xMLID_20_Path.addLine(to: CGPoint(x: 235.6, y: 101.4))
        xMLID_20_Path.addCurve(to: CGPoint(x: 246.7, y: 97.3), controlPoint1: CGPoint(x: 239.8, y: 103.3), controlPoint2: CGPoint(x: 244.8, y: 101.5))
        xMLID_20_Path.addCurve(to: CGPoint(x: 242.6, y: 86.1), controlPoint1: CGPoint(x: 248.6, y: 93.1), controlPoint2: CGPoint(x: 246.8, y: 88.1))
        xMLID_20_Path.close()
        fillColor3.setFill()
        xMLID_20_Path.fill()


        //// XMLID_10_ Drawing
        let xMLID_10_Path = UIBezierPath(ovalIn: CGRect(x: 112.6, y: 108.4, width: 56.2, height: 56.2))
        fillColor2.setFill()
        xMLID_10_Path.fill()


        //// XMLID_11_ Drawing
        let xMLID_11_Path = UIBezierPath(ovalIn: CGRect(x: 118.7, y: 114.5, width: 44, height: 44))
        fillColor.setFill()
        xMLID_11_Path.fill()


        //// XMLID_7_
        //// XMLID_8_ Drawing
        let xMLID_8_Path = UIBezierPath()
        xMLID_8_Path.move(to: CGPoint(x: 104.5, y: 15.7))
        xMLID_8_Path.addCurve(to: CGPoint(x: 104.2, y: 20.5), controlPoint1: CGPoint(x: 104.3, y: 17.3), controlPoint2: CGPoint(x: 104.2, y: 18.9))
        xMLID_8_Path.addCurve(to: CGPoint(x: 140.7, y: 57), controlPoint1: CGPoint(x: 104.2, y: 40.6), controlPoint2: CGPoint(x: 120.5, y: 57))
        xMLID_8_Path.addCurve(to: CGPoint(x: 177.2, y: 20.5), controlPoint1: CGPoint(x: 160.8, y: 57), controlPoint2: CGPoint(x: 177.2, y: 40.7))
        xMLID_8_Path.addCurve(to: CGPoint(x: 176.9, y: 15.7), controlPoint1: CGPoint(x: 177.2, y: 18.9), controlPoint2: CGPoint(x: 177.1, y: 17.2))
        xMLID_8_Path.addLine(to: CGPoint(x: 104.5, y: 15.7))
        xMLID_8_Path.close()
        fillColor.setFill()
        xMLID_8_Path.fill()




        //// XMLID_12_ Drawing
        let xMLID_12_Path = UIBezierPath(ovalIn: CGRect(x: 131.5, y: 127.3, width: 18.4, height: 18.4))
        fillColor2.setFill()
        xMLID_12_Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 159.7, y: 494))
        bezier6Path.addLine(to: CGPoint(x: 123.9, y: 494))
        bezier6Path.addCurve(to: CGPoint(x: 91.3, y: 397.3), controlPoint1: CGPoint(x: 106.5, y: 494), controlPoint2: CGPoint(x: 92.1, y: 408.8))
        bezier6Path.addCurve(to: CGPoint(x: 91.3, y: 395.4), controlPoint1: CGPoint(x: 91.3, y: 396.7), controlPoint2: CGPoint(x: 91.3, y: 396))
        bezier6Path.addLine(to: CGPoint(x: 100.1, y: 290.1))
        bezier6Path.addCurve(to: CGPoint(x: 134.9, y: 239.2), controlPoint1: CGPoint(x: 100.1, y: 278.2), controlPoint2: CGPoint(x: 117, y: 239.2))
        bezier6Path.addLine(to: CGPoint(x: 148.6, y: 239.2))
        bezier6Path.addCurve(to: CGPoint(x: 182.3, y: 290.1), controlPoint1: CGPoint(x: 166.5, y: 239.2), controlPoint2: CGPoint(x: 182.3, y: 278.2))
        bezier6Path.addLine(to: CGPoint(x: 189.9, y: 395.1))
        bezier6Path.addCurve(to: CGPoint(x: 189.9, y: 398.3), controlPoint1: CGPoint(x: 190, y: 396.2), controlPoint2: CGPoint(x: 190, y: 397.3))
        bezier6Path.addCurve(to: CGPoint(x: 159.7, y: 494), controlPoint1: CGPoint(x: 188.5, y: 409.3), controlPoint2: CGPoint(x: 176.6, y: 494))
        bezier6Path.close()
        fillColor.setFill()
        bezier6Path.fill()


        //// XMLID_13_
        //// XMLID_14_ Drawing
        let xMLID_14_Path = UIBezierPath(ovalIn: CGRect(x: 89.8, y: 34.7, width: 51.8, height: 51.8))
        fillColor.setFill()
        xMLID_14_Path.fill()


        //// XMLID_15_ Drawing
        let xMLID_15_Path = UIBezierPath(ovalIn: CGRect(x: 97.4, y: 42.3, width: 36.6, height: 36.6))
        fillColor2.setFill()
        xMLID_15_Path.fill()


        //// XMLID_16_ Drawing
        let xMLID_16_Path = UIBezierPath(ovalIn: CGRect(x: 139.8, y: 34.7, width: 51.8, height: 51.8))
        fillColor.setFill()
        xMLID_16_Path.fill()


        //// XMLID_17_ Drawing
        let xMLID_17_Path = UIBezierPath(ovalIn: CGRect(x: 147.4, y: 42.3, width: 36.6, height: 36.6))
        fillColor2.setFill()
        xMLID_17_Path.fill()




        //// XMLID_4_
        //// XMLID_5_
        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 14.3, y: 122.9))
        bezier7Path.addLine(to: CGPoint(x: 69.9, y: 97.3))
        bezier7Path.addCurve(to: CGPoint(x: 71.4, y: 93.3), controlPoint1: CGPoint(x: 71.4, y: 96.6), controlPoint2: CGPoint(x: 72.1, y: 94.8))
        bezier7Path.addLine(to: CGPoint(x: 61.4, y: 71.4))
        bezier7Path.addCurve(to: CGPoint(x: 57.4, y: 69.9), controlPoint1: CGPoint(x: 60.7, y: 69.9), controlPoint2: CGPoint(x: 58.9, y: 69.2))
        bezier7Path.addLine(to: CGPoint(x: 1.8, y: 95.6))
        bezier7Path.addCurve(to: CGPoint(x: 0.3, y: 99.6), controlPoint1: CGPoint(x: 0.3, y: 96.3), controlPoint2: CGPoint(x: -0.4, y: 98.1))
        bezier7Path.addLine(to: CGPoint(x: 10.3, y: 121.5))
        bezier7Path.addCurve(to: CGPoint(x: 14.3, y: 122.9), controlPoint1: CGPoint(x: 11, y: 123), controlPoint2: CGPoint(x: 12.8, y: 123.6))
        bezier7Path.close()
        fillColor.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 77.4, y: 100.3))
        bezier8Path.addLine(to: CGPoint(x: 77.4, y: 100.3))
        bezier8Path.addCurve(to: CGPoint(x: 79.8, y: 93.8), controlPoint1: CGPoint(x: 79.8, y: 99.2), controlPoint2: CGPoint(x: 80.9, y: 96.3))
        bezier8Path.addLine(to: CGPoint(x: 66.5, y: 64.9))
        bezier8Path.addCurve(to: CGPoint(x: 60, y: 62.5), controlPoint1: CGPoint(x: 65.4, y: 62.5), controlPoint2: CGPoint(x: 62.5, y: 61.4))
        bezier8Path.addLine(to: CGPoint(x: 60, y: 62.5))
        bezier8Path.addCurve(to: CGPoint(x: 57.6, y: 69), controlPoint1: CGPoint(x: 57.6, y: 63.6), controlPoint2: CGPoint(x: 56.5, y: 66.5))
        bezier8Path.addLine(to: CGPoint(x: 70.9, y: 97.9))
        bezier8Path.addCurve(to: CGPoint(x: 77.4, y: 100.3), controlPoint1: CGPoint(x: 72.1, y: 100.3), controlPoint2: CGPoint(x: 75, y: 101.4))
        bezier8Path.close()
        fillColor.setFill()
        bezier8Path.fill()




        //// XMLID_6_
        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 266.6, y: 122.9))
        bezier9Path.addLine(to: CGPoint(x: 211, y: 97.4))
        bezier9Path.addCurve(to: CGPoint(x: 209.5, y: 93.4), controlPoint1: CGPoint(x: 209.5, y: 96.7), controlPoint2: CGPoint(x: 208.8, y: 94.9))
        bezier9Path.addLine(to: CGPoint(x: 219.5, y: 71.5))
        bezier9Path.addCurve(to: CGPoint(x: 223.5, y: 70), controlPoint1: CGPoint(x: 220.2, y: 70), controlPoint2: CGPoint(x: 222, y: 69.3))
        bezier9Path.addLine(to: CGPoint(x: 279.1, y: 95.6))
        bezier9Path.addCurve(to: CGPoint(x: 280.6, y: 99.6), controlPoint1: CGPoint(x: 280.6, y: 96.3), controlPoint2: CGPoint(x: 281.3, y: 98.1))
        bezier9Path.addLine(to: CGPoint(x: 270.6, y: 121.5))
        bezier9Path.addCurve(to: CGPoint(x: 266.6, y: 122.9), controlPoint1: CGPoint(x: 269.9, y: 123), controlPoint2: CGPoint(x: 268.1, y: 123.6))
        bezier9Path.close()
        fillColor.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 203.5, y: 100.3))
        bezier10Path.addLine(to: CGPoint(x: 203.5, y: 100.3))
        bezier10Path.addCurve(to: CGPoint(x: 201.1, y: 93.8), controlPoint1: CGPoint(x: 201.1, y: 99.2), controlPoint2: CGPoint(x: 200, y: 96.3))
        bezier10Path.addLine(to: CGPoint(x: 214.4, y: 64.9))
        bezier10Path.addCurve(to: CGPoint(x: 220.9, y: 62.5), controlPoint1: CGPoint(x: 215.5, y: 62.5), controlPoint2: CGPoint(x: 218.4, y: 61.4))
        bezier10Path.addLine(to: CGPoint(x: 220.9, y: 62.5))
        bezier10Path.addCurve(to: CGPoint(x: 223.3, y: 69), controlPoint1: CGPoint(x: 223.3, y: 63.6), controlPoint2: CGPoint(x: 224.4, y: 66.5))
        bezier10Path.addLine(to: CGPoint(x: 210, y: 97.9))
        bezier10Path.addCurve(to: CGPoint(x: 203.5, y: 100.3), controlPoint1: CGPoint(x: 208.9, y: 100.3), controlPoint2: CGPoint(x: 206, y: 101.4))
        bezier10Path.close()
        fillColor.setFill()
        bezier10Path.fill()
        
        context.restoreGState()

    }
    
    
    public func droppedMarkerImage(_ color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: CGFloat(234), height: CGFloat(543)), false, 0)
        RCBikeFill3.drawImageWith(color)
        let image: UIImage? = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return image!
    }





    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
