//
//  RCCarSetting.swift
//  ProjectName
//
//  Created By Anshul Jain on 25-March-2019
//  Copyright Â© Roadcast Tech Solutions Private Limited
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class RCCarSetting : NSObject {

    //// Drawing Methods
    
    
    @objc public dynamic class func drawImageWith(_ color:UIColor) -> Void {
         RCCarSetting.drawCanvas1(frame: CGRect.init(x: 0, y: 0, width: 1957, height: 844), resizing: .aspectFill, color: color)
    }

    @objc public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1957, height: 844), resizing: ResizingBehavior = .aspectFit, color: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1957, height: 844), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1957, y: resizedFrame.height / 844)


        //// Color Declarations
        let fillColor = color
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.815, green: 0.175, blue: 0.194, alpha: 1.000)
        let fillColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// XMLID_1_
        //// XMLID_10_ Drawing
        let xMLID_10_Path = UIBezierPath()
        xMLID_10_Path.move(to: CGPoint(x: 1171.4, y: 806.9))
        xMLID_10_Path.addCurve(to: CGPoint(x: 1347.7, y: 799.2), controlPoint1: CGPoint(x: 1171.4, y: 806.9), controlPoint2: CGPoint(x: 1309.2, y: 800.9))
        xMLID_10_Path.addCurve(to: CGPoint(x: 1740.7, y: 808.9), controlPoint1: CGPoint(x: 1386.3, y: 797.4), controlPoint2: CGPoint(x: 1599.3, y: 823.4))
        xMLID_10_Path.addCurve(to: CGPoint(x: 1933.8, y: 574), controlPoint1: CGPoint(x: 1882.1, y: 794.4), controlPoint2: CGPoint(x: 1910, y: 575.8))
        xMLID_10_Path.addCurve(to: CGPoint(x: 1956.6, y: 424.6), controlPoint1: CGPoint(x: 1957.7, y: 572.2), controlPoint2: CGPoint(x: 1956.6, y: 424.6))
        xMLID_10_Path.addCurve(to: CGPoint(x: 1934.1, y: 275.2), controlPoint1: CGPoint(x: 1956.6, y: 424.6), controlPoint2: CGPoint(x: 1958, y: 277.1))
        xMLID_10_Path.addCurve(to: CGPoint(x: 1741.5, y: 39.9), controlPoint1: CGPoint(x: 1910.2, y: 273.3), controlPoint2: CGPoint(x: 1882.9, y: 54.7))
        xMLID_10_Path.addCurve(to: CGPoint(x: 1348.4, y: 48.6), controlPoint1: CGPoint(x: 1600.1, y: 25), controlPoint2: CGPoint(x: 1387, y: 50.5))
        xMLID_10_Path.addCurve(to: CGPoint(x: 1172.1, y: 40.4), controlPoint1: CGPoint(x: 1309.8, y: 46.7), controlPoint2: CGPoint(x: 1172.1, y: 40.4))
        xMLID_10_Path.addLine(to: CGPoint(x: 1142.8, y: 0))
        xMLID_10_Path.addLine(to: CGPoint(x: 1121.1, y: 0))
        xMLID_10_Path.addLine(to: CGPoint(x: 1120.9, y: 34.2))
        xMLID_10_Path.addCurve(to: CGPoint(x: 207.4, y: 61.3), controlPoint1: CGPoint(x: 1120.9, y: 34.2), controlPoint2: CGPoint(x: 244.2, y: 40.5))
        xMLID_10_Path.addCurve(to: CGPoint(x: 37, y: 175.6), controlPoint1: CGPoint(x: 170.6, y: 82), controlPoint2: CGPoint(x: 64.7, y: 107.6))
        xMLID_10_Path.addCurve(to: CGPoint(x: 0, y: 422.3), controlPoint1: CGPoint(x: 9.4, y: 243.5), controlPoint2: CGPoint(x: 0, y: 422.3))
        xMLID_10_Path.addCurve(to: CGPoint(x: 36.4, y: 669), controlPoint1: CGPoint(x: 0, y: 422.3), controlPoint2: CGPoint(x: 9, y: 601))
        xMLID_10_Path.addCurve(to: CGPoint(x: 206.5, y: 783.7), controlPoint1: CGPoint(x: 63.9, y: 737), controlPoint2: CGPoint(x: 169.8, y: 762.8))
        xMLID_10_Path.addCurve(to: CGPoint(x: 1119.9, y: 812.9), controlPoint1: CGPoint(x: 243.2, y: 804.6), controlPoint2: CGPoint(x: 1119.9, y: 812.9))
        xMLID_10_Path.addLine(to: CGPoint(x: 1119.5, y: 843.6))
        xMLID_10_Path.addLine(to: CGPoint(x: 1147.7, y: 843.6))
        xMLID_10_Path.addLine(to: CGPoint(x: 1171.4, y: 806.9))
        xMLID_10_Path.close()
        fillColor.setFill()
        xMLID_10_Path.fill()


        //// XMLID_9_ Drawing
        let xMLID_9_Path = UIBezierPath()
        xMLID_9_Path.move(to: CGPoint(x: 1259.7, y: 139.1))
        xMLID_9_Path.addCurve(to: CGPoint(x: 1012.3, y: 189), controlPoint1: CGPoint(x: 1259.7, y: 139.1), controlPoint2: CGPoint(x: 1014.8, y: 176.8))
        xMLID_9_Path.addCurve(to: CGPoint(x: 1011.8, y: 644.5), controlPoint1: CGPoint(x: 1009.8, y: 201.2), controlPoint2: CGPoint(x: 1054.8, y: 505))
        xMLID_9_Path.addCurve(to: CGPoint(x: 1259.1, y: 708.5), controlPoint1: CGPoint(x: 1011.8, y: 644.5), controlPoint2: CGPoint(x: 991, y: 665.3))
        xMLID_9_Path.addCurve(to: CGPoint(x: 1337.8, y: 435.5), controlPoint1: CGPoint(x: 1259.1, y: 708.5), controlPoint2: CGPoint(x: 1340, y: 608.2))
        xMLID_9_Path.addCurve(to: CGPoint(x: 1259.7, y: 139.1), controlPoint1: CGPoint(x: 1335.5, y: 262.8), controlPoint2: CGPoint(x: 1259.7, y: 139.1))
        xMLID_9_Path.close()
        fillColor2.setFill()
        xMLID_9_Path.fill()


        //// XMLID_8_ Drawing
        let xMLID_8_Path = UIBezierPath()
        xMLID_8_Path.move(to: CGPoint(x: 1128.1, y: 104.6))
        xMLID_8_Path.addCurve(to: CGPoint(x: 933.3, y: 172.3), controlPoint1: CGPoint(x: 1128.1, y: 104.6), controlPoint2: CGPoint(x: 986.6, y: 176.1))
        xMLID_8_Path.addCurve(to: CGPoint(x: 538.4, y: 160.8), controlPoint1: CGPoint(x: 880, y: 168.6), controlPoint2: CGPoint(x: 551.2, y: 181))
        xMLID_8_Path.addCurve(to: CGPoint(x: 538.5, y: 103.9), controlPoint1: CGPoint(x: 525.6, y: 140.6), controlPoint2: CGPoint(x: 538.5, y: 103.9))
        xMLID_8_Path.addLine(to: CGPoint(x: 1128.1, y: 104.6))
        xMLID_8_Path.close()
        fillColor2.setFill()
        xMLID_8_Path.fill()


        //// XMLID_7_ Drawing
        let xMLID_7_Path = UIBezierPath()
        xMLID_7_Path.move(to: CGPoint(x: 1127.4, y: 742.6))
        xMLID_7_Path.addCurve(to: CGPoint(x: 932.8, y: 674.4), controlPoint1: CGPoint(x: 1127.4, y: 742.6), controlPoint2: CGPoint(x: 986.1, y: 670.8))
        xMLID_7_Path.addCurve(to: CGPoint(x: 537.9, y: 685), controlPoint1: CGPoint(x: 879.5, y: 678), controlPoint2: CGPoint(x: 550.8, y: 664.8))
        xMLID_7_Path.addCurve(to: CGPoint(x: 537.8, y: 741.9), controlPoint1: CGPoint(x: 525, y: 705.2), controlPoint2: CGPoint(x: 537.8, y: 741.9))
        xMLID_7_Path.addLine(to: CGPoint(x: 1127.4, y: 742.6))
        xMLID_7_Path.close()
        fillColor2.setFill()
        xMLID_7_Path.fill()


        //// XMLID_6_ Drawing
        let xMLID_6_Path = UIBezierPath()
        xMLID_6_Path.move(to: CGPoint(x: 424.9, y: 138.7))
        xMLID_6_Path.addLine(to: CGPoint(x: 508, y: 239.2))
        xMLID_6_Path.addLine(to: CGPoint(x: 507.5, y: 623.7))
        xMLID_6_Path.addLine(to: CGPoint(x: 433.9, y: 706.9))
        xMLID_6_Path.addCurve(to: CGPoint(x: 243.2, y: 422.6), controlPoint1: CGPoint(x: 433.9, y: 706.9), controlPoint2: CGPoint(x: 243.8, y: 654.4))
        xMLID_6_Path.addCurve(to: CGPoint(x: 424.9, y: 138.7), controlPoint1: CGPoint(x: 242.9, y: 197.2), controlPoint2: CGPoint(x: 424.9, y: 138.7))
        xMLID_6_Path.close()
        fillColor2.setFill()
        xMLID_6_Path.fill()


        //// XMLID_5_ Drawing
        let xMLID_5_Path = UIBezierPath()
        xMLID_5_Path.move(to: CGPoint(x: 170.6, y: 111.4))
        xMLID_5_Path.addCurve(to: CGPoint(x: 70.1, y: 171.9), controlPoint1: CGPoint(x: 170.6, y: 111.4), controlPoint2: CGPoint(x: 81.2, y: 145.7))
        xMLID_5_Path.addCurve(to: CGPoint(x: 49.1, y: 296.1), controlPoint1: CGPoint(x: 59, y: 198.2), controlPoint2: CGPoint(x: 49.1, y: 296.1))
        xMLID_5_Path.addCurve(to: CGPoint(x: 65, y: 296.1), controlPoint1: CGPoint(x: 49.1, y: 296.1), controlPoint2: CGPoint(x: 58.9, y: 309.6))
        xMLID_5_Path.addCurve(to: CGPoint(x: 88.4, y: 179.8), controlPoint1: CGPoint(x: 71.1, y: 282.6), controlPoint2: CGPoint(x: 72.5, y: 196.9))
        xMLID_5_Path.addCurve(to: CGPoint(x: 170.5, y: 129.7), controlPoint1: CGPoint(x: 104.3, y: 162.7), controlPoint2: CGPoint(x: 165.6, y: 138.3))
        xMLID_5_Path.addCurve(to: CGPoint(x: 170.6, y: 111.4), controlPoint1: CGPoint(x: 175.5, y: 121.2), controlPoint2: CGPoint(x: 170.6, y: 111.4))
        xMLID_5_Path.close()
        fillColor3.setFill()
        xMLID_5_Path.fill()


        //// XMLID_4_ Drawing
        let xMLID_4_Path = UIBezierPath()
        xMLID_4_Path.move(to: CGPoint(x: 169.8, y: 735.3))
        xMLID_4_Path.addCurve(to: CGPoint(x: 69.5, y: 674.5), controlPoint1: CGPoint(x: 169.8, y: 735.3), controlPoint2: CGPoint(x: 80.5, y: 700.8))
        xMLID_4_Path.addCurve(to: CGPoint(x: 48.8, y: 550.2), controlPoint1: CGPoint(x: 58.5, y: 648.2), controlPoint2: CGPoint(x: 48.8, y: 550.2))
        xMLID_4_Path.addCurve(to: CGPoint(x: 64.7, y: 550.2), controlPoint1: CGPoint(x: 48.8, y: 550.2), controlPoint2: CGPoint(x: 58.6, y: 536.7))
        xMLID_4_Path.addCurve(to: CGPoint(x: 87.8, y: 666.6), controlPoint1: CGPoint(x: 70.8, y: 563.7), controlPoint2: CGPoint(x: 71.9, y: 649.4))
        xMLID_4_Path.addCurve(to: CGPoint(x: 169.8, y: 716.9), controlPoint1: CGPoint(x: 103.7, y: 683.8), controlPoint2: CGPoint(x: 164.9, y: 708.3))
        xMLID_4_Path.addCurve(to: CGPoint(x: 169.8, y: 735.3), controlPoint1: CGPoint(x: 174.7, y: 725.5), controlPoint2: CGPoint(x: 169.8, y: 735.3))
        xMLID_4_Path.close()
        fillColor3.setFill()
        xMLID_4_Path.fill()


        //// XMLID_3_ Drawing
        let xMLID_3_Path = UIBezierPath()
        xMLID_3_Path.move(to: CGPoint(x: 1762.4, y: 101.1))
        xMLID_3_Path.addCurve(to: CGPoint(x: 1861.4, y: 250.6), controlPoint1: CGPoint(x: 1762.4, y: 101.1), controlPoint2: CGPoint(x: 1835.8, y: 122))
        xMLID_3_Path.addCurve(to: CGPoint(x: 1774.5, y: 204), controlPoint1: CGPoint(x: 1861.4, y: 250.6), controlPoint2: CGPoint(x: 1802.6, y: 257.9))
        xMLID_3_Path.addCurve(to: CGPoint(x: 1734.2, y: 110.9), controlPoint1: CGPoint(x: 1746.4, y: 150.1), controlPoint2: CGPoint(x: 1724.4, y: 124.4))
        xMLID_3_Path.addCurve(to: CGPoint(x: 1762.4, y: 101.1), controlPoint1: CGPoint(x: 1744.1, y: 97.4), controlPoint2: CGPoint(x: 1748, y: 94.4))
        xMLID_3_Path.close()
        fillColor4.setFill()
        xMLID_3_Path.fill()


        //// XMLID_2_ Drawing
        let xMLID_2_Path = UIBezierPath()
        xMLID_2_Path.move(to: CGPoint(x: 1761.7, y: 736.5))
        xMLID_2_Path.addCurve(to: CGPoint(x: 1861.1, y: 587.2), controlPoint1: CGPoint(x: 1761.7, y: 736.5), controlPoint2: CGPoint(x: 1835.2, y: 715.8))
        xMLID_2_Path.addCurve(to: CGPoint(x: 1774.1, y: 633.6), controlPoint1: CGPoint(x: 1861.1, y: 587.2), controlPoint2: CGPoint(x: 1802.3, y: 579.8))
        xMLID_2_Path.addCurve(to: CGPoint(x: 1733.6, y: 726.6), controlPoint1: CGPoint(x: 1745.9, y: 687.4), controlPoint2: CGPoint(x: 1723.8, y: 713.1))
        xMLID_2_Path.addCurve(to: CGPoint(x: 1761.7, y: 736.5), controlPoint1: CGPoint(x: 1743.3, y: 740.1), controlPoint2: CGPoint(x: 1747.3, y: 743.1))
        xMLID_2_Path.close()
        fillColor4.setFill()
        xMLID_2_Path.fill()
        
        context.restoreGState()

    }
    
    
    public func droppedMarkerImage(_ color: UIColor) -> UIImage {
    
        UIGraphicsBeginImageContextWithOptions(CGSize(width: CGFloat(1957), height: CGFloat(844)), false, 0)
        RCCarSetting.drawImageWith(color)
        let image: UIImage? = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
    
        return image!
    
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
