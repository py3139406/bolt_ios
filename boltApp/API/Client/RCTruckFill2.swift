//
//  RCTruck.swift
//  ProjectName
//
//  Created By Anshul Jain on 25-March-2019
//  Copyright Â© Roadcast Tech Solutions Private Limited
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class RCTruck : NSObject {

    //// Drawing Methods
    
    
    @objc public dynamic class func drawImageWith(_ color:UIColor) -> Void {
        RCTruck.drawTruck1Canvas(frame: CGRect.init(x: 0, y: 0, width: 169, height: 543), resizing: .aspectFill, color: color)
    }


    @objc public dynamic class func drawTruck1Canvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 169, height: 543), resizing: ResizingBehavior = .aspectFit, color:UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 169, height: 543), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 169, y: resizedFrame.height / 543)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor2 = color
        let fillColor3 = UIColor(red: 0.755, green: 0.143, blue: 0.204, alpha: 1.000)
        let fillColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// XMLID_80_
        //// XMLID_107_
        //// XMLID_110_
        //// XMLID_111_ Drawing
        let xMLID_111_Path = UIBezierPath()
        xMLID_111_Path.move(to: CGPoint(x: 143.7, y: 35.1))
        xMLID_111_Path.addLine(to: CGPoint(x: 155.8, y: 35.1))
        xMLID_111_Path.addCurve(to: CGPoint(x: 163.4, y: 38.3), controlPoint1: CGPoint(x: 158.5, y: 35.1), controlPoint2: CGPoint(x: 161.3, y: 36.1))
        xMLID_111_Path.addCurve(to: CGPoint(x: 166.5, y: 45.9), controlPoint1: CGPoint(x: 165.5, y: 40.4), controlPoint2: CGPoint(x: 166.5, y: 43.1))
        xMLID_111_Path.addLine(to: CGPoint(x: 166.5, y: 82.2))
        xMLID_111_Path.addCurve(to: CGPoint(x: 163.4, y: 89.8), controlPoint1: CGPoint(x: 166.5, y: 84.9), controlPoint2: CGPoint(x: 165.5, y: 87.7))
        xMLID_111_Path.addCurve(to: CGPoint(x: 155.8, y: 93), controlPoint1: CGPoint(x: 161.3, y: 91.9), controlPoint2: CGPoint(x: 158.5, y: 93))
        xMLID_111_Path.addLine(to: CGPoint(x: 143.7, y: 93))
        xMLID_111_Path.addLine(to: CGPoint(x: 143.7, y: 35.1))
        xMLID_111_Path.close()
        fillColor.setFill()
        xMLID_111_Path.fill()
        
        
        
        
        //// XMLID_108_
        //// XMLID_109_ Drawing
        let xMLID_109_Path = UIBezierPath()
        xMLID_109_Path.move(to: CGPoint(x: 22.9, y: 35.1))
        xMLID_109_Path.addLine(to: CGPoint(x: 10.8, y: 35.1))
        xMLID_109_Path.addCurve(to: CGPoint(x: 3.2, y: 38.3), controlPoint1: CGPoint(x: 8.1, y: 35.1), controlPoint2: CGPoint(x: 5.3, y: 36.1))
        xMLID_109_Path.addCurve(to: CGPoint(x: 0, y: 45.9), controlPoint1: CGPoint(x: 1.1, y: 40.4), controlPoint2: CGPoint(x: 0, y: 43.1))
        xMLID_109_Path.addLine(to: CGPoint(x: 0, y: 82.2))
        xMLID_109_Path.addCurve(to: CGPoint(x: 3.2, y: 89.8), controlPoint1: CGPoint(x: 0, y: 84.9), controlPoint2: CGPoint(x: 1, y: 87.7))
        xMLID_109_Path.addCurve(to: CGPoint(x: 10.8, y: 93), controlPoint1: CGPoint(x: 5.3, y: 91.9), controlPoint2: CGPoint(x: 8, y: 93))
        xMLID_109_Path.addLine(to: CGPoint(x: 22.9, y: 93))
        xMLID_109_Path.addLine(to: CGPoint(x: 22.9, y: 35.1))
        xMLID_109_Path.close()
        fillColor.setFill()
        xMLID_109_Path.fill()
        
        
        
        
        
        
        //// XMLID_99_
        //// XMLID_105_ Drawing
        let xMLID_105_Path = UIBezierPath()
        xMLID_105_Path.move(to: CGPoint(x: 143.7, y: 210.7))
        xMLID_105_Path.addLine(to: CGPoint(x: 155.8, y: 210.7))
        xMLID_105_Path.addCurve(to: CGPoint(x: 163.4, y: 213.9), controlPoint1: CGPoint(x: 158.5, y: 210.7), controlPoint2: CGPoint(x: 161.3, y: 211.7))
        xMLID_105_Path.addCurve(to: CGPoint(x: 166.5, y: 221.5), controlPoint1: CGPoint(x: 165.5, y: 216), controlPoint2: CGPoint(x: 166.5, y: 218.7))
        xMLID_105_Path.addLine(to: CGPoint(x: 166.5, y: 257.8))
        xMLID_105_Path.addCurve(to: CGPoint(x: 163.4, y: 265.4), controlPoint1: CGPoint(x: 166.5, y: 260.5), controlPoint2: CGPoint(x: 165.5, y: 263.3))
        xMLID_105_Path.addCurve(to: CGPoint(x: 155.8, y: 268.6), controlPoint1: CGPoint(x: 161.3, y: 267.5), controlPoint2: CGPoint(x: 158.5, y: 268.6))
        xMLID_105_Path.addLine(to: CGPoint(x: 143.7, y: 268.6))
        xMLID_105_Path.addLine(to: CGPoint(x: 143.7, y: 210.7))
        xMLID_105_Path.close()
        fillColor.setFill()
        xMLID_105_Path.fill()
        
        
        //// XMLID_104_ Drawing
        let xMLID_104_Path = UIBezierPath()
        xMLID_104_Path.move(to: CGPoint(x: 143.7, y: 365.3))
        xMLID_104_Path.addLine(to: CGPoint(x: 155.8, y: 365.3))
        xMLID_104_Path.addCurve(to: CGPoint(x: 163.4, y: 368.4), controlPoint1: CGPoint(x: 158.5, y: 365.3), controlPoint2: CGPoint(x: 161.3, y: 366.4))
        xMLID_104_Path.addCurve(to: CGPoint(x: 166.5, y: 376), controlPoint1: CGPoint(x: 165.5, y: 370.5), controlPoint2: CGPoint(x: 166.5, y: 373.2))
        xMLID_104_Path.addLine(to: CGPoint(x: 166.5, y: 412.3))
        xMLID_104_Path.addCurve(to: CGPoint(x: 163.4, y: 419.9), controlPoint1: CGPoint(x: 166.5, y: 415), controlPoint2: CGPoint(x: 165.5, y: 417.8))
        xMLID_104_Path.addCurve(to: CGPoint(x: 155.8, y: 423), controlPoint1: CGPoint(x: 161.3, y: 422), controlPoint2: CGPoint(x: 158.5, y: 423))
        xMLID_104_Path.addLine(to: CGPoint(x: 143.7, y: 423))
        xMLID_104_Path.addLine(to: CGPoint(x: 143.7, y: 365.3))
        xMLID_104_Path.close()
        fillColor.setFill()
        xMLID_104_Path.fill()
        
        
        //// XMLID_103_ Drawing
        let xMLID_103_Path = UIBezierPath()
        xMLID_103_Path.move(to: CGPoint(x: 22.9, y: 210.7))
        xMLID_103_Path.addLine(to: CGPoint(x: 10.8, y: 210.7))
        xMLID_103_Path.addCurve(to: CGPoint(x: 3.2, y: 213.9), controlPoint1: CGPoint(x: 8.1, y: 210.7), controlPoint2: CGPoint(x: 5.3, y: 211.7))
        xMLID_103_Path.addCurve(to: CGPoint(x: 0, y: 221.5), controlPoint1: CGPoint(x: 1.1, y: 216), controlPoint2: CGPoint(x: 0, y: 218.7))
        xMLID_103_Path.addLine(to: CGPoint(x: 0, y: 257.8))
        xMLID_103_Path.addCurve(to: CGPoint(x: 3.2, y: 265.4), controlPoint1: CGPoint(x: 0, y: 260.5), controlPoint2: CGPoint(x: 1, y: 263.3))
        xMLID_103_Path.addCurve(to: CGPoint(x: 10.8, y: 268.6), controlPoint1: CGPoint(x: 5.3, y: 267.5), controlPoint2: CGPoint(x: 8, y: 268.6))
        xMLID_103_Path.addLine(to: CGPoint(x: 22.9, y: 268.6))
        xMLID_103_Path.addLine(to: CGPoint(x: 22.9, y: 210.7))
        xMLID_103_Path.close()
        fillColor.setFill()
        xMLID_103_Path.fill()
        
        
        //// XMLID_102_ Drawing
        let xMLID_102_Path = UIBezierPath()
        xMLID_102_Path.move(to: CGPoint(x: 22.9, y: 365.3))
        xMLID_102_Path.addLine(to: CGPoint(x: 10.8, y: 365.3))
        xMLID_102_Path.addCurve(to: CGPoint(x: 3.2, y: 368.4), controlPoint1: CGPoint(x: 8.1, y: 365.3), controlPoint2: CGPoint(x: 5.3, y: 366.4))
        xMLID_102_Path.addCurve(to: CGPoint(x: 0, y: 376), controlPoint1: CGPoint(x: 1.1, y: 370.5), controlPoint2: CGPoint(x: 0, y: 373.2))
        xMLID_102_Path.addLine(to: CGPoint(x: 0, y: 412.3))
        xMLID_102_Path.addCurve(to: CGPoint(x: 3.2, y: 419.9), controlPoint1: CGPoint(x: 0, y: 415), controlPoint2: CGPoint(x: 1, y: 417.8))
        xMLID_102_Path.addCurve(to: CGPoint(x: 10.8, y: 423), controlPoint1: CGPoint(x: 5.3, y: 422), controlPoint2: CGPoint(x: 8, y: 423))
        xMLID_102_Path.addLine(to: CGPoint(x: 22.9, y: 423))
        xMLID_102_Path.addLine(to: CGPoint(x: 22.9, y: 365.3))
        xMLID_102_Path.close()
        fillColor.setFill()
        xMLID_102_Path.fill()
        
        
        //// XMLID_101_ Drawing
        let xMLID_101_Path = UIBezierPath()
        xMLID_101_Path.move(to: CGPoint(x: 143.7, y: 438.6))
        xMLID_101_Path.addLine(to: CGPoint(x: 155.8, y: 438.6))
        xMLID_101_Path.addCurve(to: CGPoint(x: 163.4, y: 441.7), controlPoint1: CGPoint(x: 158.5, y: 438.6), controlPoint2: CGPoint(x: 161.3, y: 439.7))
        xMLID_101_Path.addCurve(to: CGPoint(x: 166.5, y: 449.3), controlPoint1: CGPoint(x: 165.5, y: 443.8), controlPoint2: CGPoint(x: 166.5, y: 446.5))
        xMLID_101_Path.addLine(to: CGPoint(x: 166.5, y: 485.6))
        xMLID_101_Path.addCurve(to: CGPoint(x: 163.4, y: 493.2), controlPoint1: CGPoint(x: 166.5, y: 488.3), controlPoint2: CGPoint(x: 165.5, y: 491.1))
        xMLID_101_Path.addCurve(to: CGPoint(x: 155.8, y: 496.3), controlPoint1: CGPoint(x: 161.3, y: 495.3), controlPoint2: CGPoint(x: 158.5, y: 496.3))
        xMLID_101_Path.addLine(to: CGPoint(x: 143.7, y: 496.3))
        xMLID_101_Path.addLine(to: CGPoint(x: 143.7, y: 438.6))
        xMLID_101_Path.close()
        fillColor.setFill()
        xMLID_101_Path.fill()
        
        
        //// XMLID_100_ Drawing
        let xMLID_100_Path = UIBezierPath()
        xMLID_100_Path.move(to: CGPoint(x: 22.9, y: 438.6))
        xMLID_100_Path.addLine(to: CGPoint(x: 10.8, y: 438.6))
        xMLID_100_Path.addCurve(to: CGPoint(x: 3.2, y: 441.7), controlPoint1: CGPoint(x: 8.1, y: 438.6), controlPoint2: CGPoint(x: 5.3, y: 439.7))
        xMLID_100_Path.addCurve(to: CGPoint(x: 0, y: 449.3), controlPoint1: CGPoint(x: 1.1, y: 443.8), controlPoint2: CGPoint(x: 0, y: 446.5))
        xMLID_100_Path.addLine(to: CGPoint(x: 0, y: 485.6))
        xMLID_100_Path.addCurve(to: CGPoint(x: 3.2, y: 493.2), controlPoint1: CGPoint(x: 0, y: 488.3), controlPoint2: CGPoint(x: 1, y: 491.1))
        xMLID_100_Path.addCurve(to: CGPoint(x: 10.8, y: 496.3), controlPoint1: CGPoint(x: 5.3, y: 495.3), controlPoint2: CGPoint(x: 8, y: 496.3))
        xMLID_100_Path.addLine(to: CGPoint(x: 22.9, y: 496.3))
        xMLID_100_Path.addLine(to: CGPoint(x: 22.9, y: 438.6))
        xMLID_100_Path.close()
        fillColor.setFill()
        xMLID_100_Path.fill()
        
        
        
        
        //// XMLID_2_ Drawing
        let xMLID_2_Path = UIBezierPath()
        xMLID_2_Path.move(to: CGPoint(x: 1.1, y: 179.1))
        xMLID_2_Path.addLine(to: CGPoint(x: 11.5, y: 179.1))
        xMLID_2_Path.addLine(to: CGPoint(x: 11.5, y: 543))
        xMLID_2_Path.addLine(to: CGPoint(x: 155.2, y: 543))
        xMLID_2_Path.addLine(to: CGPoint(x: 155.2, y: 179.1))
        xMLID_2_Path.addLine(to: CGPoint(x: 168.7, y: 179.1))
        xMLID_2_Path.addLine(to: CGPoint(x: 168.7, y: 129.9))
        xMLID_2_Path.addLine(to: CGPoint(x: 160.2, y: 129.9))
        xMLID_2_Path.addLine(to: CGPoint(x: 160.3, y: 125.6))
        xMLID_2_Path.addCurve(to: CGPoint(x: 160.2, y: 123.9), controlPoint1: CGPoint(x: 160.3, y: 125), controlPoint2: CGPoint(x: 160.3, y: 124.5))
        xMLID_2_Path.addCurve(to: CGPoint(x: 160, y: 121.6), controlPoint1: CGPoint(x: 160.2, y: 123.1), controlPoint2: CGPoint(x: 160.1, y: 122.4))
        xMLID_2_Path.addLine(to: CGPoint(x: 158, y: 27.4))
        xMLID_2_Path.addCurve(to: CGPoint(x: 146.5, y: 10.2), controlPoint1: CGPoint(x: 157, y: 21), controlPoint2: CGPoint(x: 153.1, y: 14.8))
        xMLID_2_Path.addCurve(to: CGPoint(x: 120.4, y: 3.3), controlPoint1: CGPoint(x: 139.9, y: 5.6), controlPoint2: CGPoint(x: 128, y: 3.3))
        xMLID_2_Path.addLine(to: CGPoint(x: 46.3, y: 3.3))
        xMLID_2_Path.addCurve(to: CGPoint(x: 20.2, y: 10.2), controlPoint1: CGPoint(x: 38.7, y: 3.3), controlPoint2: CGPoint(x: 26.9, y: 5.6))
        xMLID_2_Path.addCurve(to: CGPoint(x: 8.7, y: 27.4), controlPoint1: CGPoint(x: 13.6, y: 14.8), controlPoint2: CGPoint(x: 9.7, y: 21))
        xMLID_2_Path.addLine(to: CGPoint(x: 6.4, y: 123.3))
        xMLID_2_Path.addCurve(to: CGPoint(x: 6.4, y: 123.9), controlPoint1: CGPoint(x: 6.4, y: 123.5), controlPoint2: CGPoint(x: 6.4, y: 123.7))
        xMLID_2_Path.addCurve(to: CGPoint(x: 6.5, y: 125), controlPoint1: CGPoint(x: 6.4, y: 124.3), controlPoint2: CGPoint(x: 6.4, y: 124.7))
        xMLID_2_Path.addLine(to: CGPoint(x: 6.6, y: 129.8))
        xMLID_2_Path.addLine(to: CGPoint(x: 1.2, y: 129.8))
        xMLID_2_Path.addLine(to: CGPoint(x: 1.2, y: 179.1))
        xMLID_2_Path.addLine(to: CGPoint(x: 1.1, y: 179.1))
        xMLID_2_Path.close()
        fillColor2.setFill()
        xMLID_2_Path.fill()
        
        
        //// XMLID_96_
        //// XMLID_98_ Drawing
        let xMLID_98_Path = UIBezierPath()
        xMLID_98_Path.move(to: CGPoint(x: 6.3, y: 123.9))
        xMLID_98_Path.addLine(to: CGPoint(x: 6.3, y: 123.3))
        xMLID_98_Path.addCurve(to: CGPoint(x: 6.3, y: 122.8), controlPoint1: CGPoint(x: 6.3, y: 123.1), controlPoint2: CGPoint(x: 6.3, y: 122.9))
        xMLID_98_Path.addLine(to: CGPoint(x: 6.3, y: 123.9))
        xMLID_98_Path.close()
        fillColor2.setFill()
        xMLID_98_Path.fill()
        
        
        //// XMLID_97_ Drawing
        let xMLID_97_Path = UIBezierPath()
        xMLID_97_Path.move(to: CGPoint(x: 160.3, y: 123.9))
        xMLID_97_Path.addLine(to: CGPoint(x: 160.3, y: 125.6))
        xMLID_97_Path.addCurve(to: CGPoint(x: 160.3, y: 126.2), controlPoint1: CGPoint(x: 160.3, y: 125.8), controlPoint2: CGPoint(x: 160.3, y: 126))
        xMLID_97_Path.addLine(to: CGPoint(x: 160.3, y: 123.9))
        xMLID_97_Path.close()
        fillColor2.setFill()
        xMLID_97_Path.fill()
        
        
        
        
        //// XMLID_95_ Drawing
        let xMLID_95_Path = UIBezierPath(rect: CGRect(x: 60.8, y: -0.1, width: 45, height: 5.7))
        fillColor.setFill()
        xMLID_95_Path.fill()
        
        
        //// XMLID_94_ Drawing
        let xMLID_94_Path = UIBezierPath()
        xMLID_94_Path.move(to: CGPoint(x: 6.3, y: 120.9))
        xMLID_94_Path.addLine(to: CGPoint(x: 6.3, y: 120.6))
        xMLID_94_Path.addCurve(to: CGPoint(x: 6.3, y: 119.5), controlPoint1: CGPoint(x: 6.3, y: 120.2), controlPoint2: CGPoint(x: 6.3, y: 119.9))
        xMLID_94_Path.addLine(to: CGPoint(x: 6.3, y: 120.9))
        xMLID_94_Path.close()
        fillColor3.setFill()
        xMLID_94_Path.fill()
        
        
        //// XMLID_93_ Drawing
        let xMLID_93_Path = UIBezierPath()
        xMLID_93_Path.move(to: CGPoint(x: 160.3, y: 120.9))
        xMLID_93_Path.addLine(to: CGPoint(x: 160.3, y: 122.9))
        xMLID_93_Path.addCurve(to: CGPoint(x: 160.3, y: 123.6), controlPoint1: CGPoint(x: 160.3, y: 123.1), controlPoint2: CGPoint(x: 160.3, y: 123.4))
        xMLID_93_Path.addLine(to: CGPoint(x: 160.3, y: 120.9))
        xMLID_93_Path.close()
        fillColor3.setFill()
        xMLID_93_Path.fill()
        
        
        //// XMLID_92_ Drawing
        let xMLID_92_Path = UIBezierPath()
        xMLID_92_Path.move(to: CGPoint(x: 6.3, y: 256.4))
        xMLID_92_Path.addLine(to: CGPoint(x: 6.3, y: 256.1))
        xMLID_92_Path.addCurve(to: CGPoint(x: 6.3, y: 255), controlPoint1: CGPoint(x: 6.3, y: 255.7), controlPoint2: CGPoint(x: 6.3, y: 255.4))
        xMLID_92_Path.addLine(to: CGPoint(x: 6.3, y: 256.4))
        xMLID_92_Path.close()
        fillColor3.setFill()
        xMLID_92_Path.fill()
        
        
        //// XMLID_91_ Drawing
        let xMLID_91_Path = UIBezierPath()
        xMLID_91_Path.move(to: CGPoint(x: 160.3, y: 256.4))
        xMLID_91_Path.addLine(to: CGPoint(x: 160.3, y: 258.4))
        xMLID_91_Path.addCurve(to: CGPoint(x: 160.3, y: 259.1), controlPoint1: CGPoint(x: 160.3, y: 258.6), controlPoint2: CGPoint(x: 160.3, y: 258.9))
        xMLID_91_Path.addLine(to: CGPoint(x: 160.3, y: 256.4))
        xMLID_91_Path.close()
        fillColor3.setFill()
        xMLID_91_Path.fill()
        
        
        //// XMLID_85_
        //// XMLID_90_ Drawing
        let xMLID_90_Path = UIBezierPath()
        xMLID_90_Path.move(to: CGPoint(x: 34.9, y: 74.9))
        xMLID_90_Path.addLine(to: CGPoint(x: 82.8, y: 74.9))
        xMLID_90_Path.addLine(to: CGPoint(x: 130.7, y: 74.9))
        xMLID_90_Path.addLine(to: CGPoint(x: 138.5, y: 54.8))
        xMLID_90_Path.addLine(to: CGPoint(x: 82.8, y: 54.8))
        xMLID_90_Path.addLine(to: CGPoint(x: 27.1, y: 54.8))
        xMLID_90_Path.addLine(to: CGPoint(x: 34.9, y: 74.9))
        xMLID_90_Path.close()
        fillColor.setFill()
        xMLID_90_Path.fill()
        
        
        //// XMLID_88_
        //// XMLID_89_ Drawing
        let xMLID_89_Path = UIBezierPath()
        xMLID_89_Path.move(to: CGPoint(x: 143.7, y: 124.1))
        xMLID_89_Path.addLine(to: CGPoint(x: 143.7, y: 54.8))
        xMLID_89_Path.addLine(to: CGPoint(x: 135.4, y: 74.9))
        xMLID_89_Path.addLine(to: CGPoint(x: 135.4, y: 124.1))
        xMLID_89_Path.addLine(to: CGPoint(x: 143.7, y: 124.1))
        xMLID_89_Path.close()
        fillColor.setFill()
        xMLID_89_Path.fill()
        
        
        
        
        //// XMLID_86_
        //// XMLID_87_ Drawing
        let xMLID_87_Path = UIBezierPath()
        xMLID_87_Path.move(to: CGPoint(x: 22.9, y: 124.1))
        xMLID_87_Path.addLine(to: CGPoint(x: 22.9, y: 54.8))
        xMLID_87_Path.addLine(to: CGPoint(x: 31.2, y: 74.9))
        xMLID_87_Path.addLine(to: CGPoint(x: 31.2, y: 124.1))
        xMLID_87_Path.addLine(to: CGPoint(x: 22.9, y: 124.1))
        xMLID_87_Path.close()
        fillColor.setFill()
        xMLID_87_Path.fill()
        
        
        
        
        
        
        //// XMLID_81_
        //// XMLID_83_ Drawing
        let xMLID_83_Path = UIBezierPath()
        xMLID_83_Path.move(to: CGPoint(x: 131, y: 14.7))
        xMLID_83_Path.addCurve(to: CGPoint(x: 146.5, y: 20.5), controlPoint1: CGPoint(x: 136.7, y: 15.8), controlPoint2: CGPoint(x: 142.5, y: 17.7))
        xMLID_83_Path.addCurve(to: CGPoint(x: 147.4, y: 21.2), controlPoint1: CGPoint(x: 146.8, y: 20.7), controlPoint2: CGPoint(x: 147.1, y: 21))
        xMLID_83_Path.addLine(to: CGPoint(x: 156, y: 21.2))
        xMLID_83_Path.addCurve(to: CGPoint(x: 146.5, y: 10.3), controlPoint1: CGPoint(x: 154.1, y: 17.1), controlPoint2: CGPoint(x: 150.9, y: 13.4))
        xMLID_83_Path.addCurve(to: CGPoint(x: 131, y: 4.5), controlPoint1: CGPoint(x: 142.5, y: 7.5), controlPoint2: CGPoint(x: 136.7, y: 5.6))
        xMLID_83_Path.addLine(to: CGPoint(x: 131, y: 14.7))
        xMLID_83_Path.close()
        fillColor4.setFill()
        xMLID_83_Path.fill()
        
        
        //// XMLID_82_ Drawing
        let xMLID_82_Path = UIBezierPath()
        xMLID_82_Path.move(to: CGPoint(x: 35.7, y: 14.7))
        xMLID_82_Path.addLine(to: CGPoint(x: 35.7, y: 4.5))
        xMLID_82_Path.addCurve(to: CGPoint(x: 20.2, y: 10.3), controlPoint1: CGPoint(x: 30, y: 5.6), controlPoint2: CGPoint(x: 24.2, y: 7.5))
        xMLID_82_Path.addCurve(to: CGPoint(x: 10.7, y: 21.2), controlPoint1: CGPoint(x: 15.8, y: 13.4), controlPoint2: CGPoint(x: 12.6, y: 17.1))
        xMLID_82_Path.addLine(to: CGPoint(x: 19.3, y: 21.2))
        xMLID_82_Path.addCurve(to: CGPoint(x: 20.2, y: 20.5), controlPoint1: CGPoint(x: 19.6, y: 21), controlPoint2: CGPoint(x: 19.9, y: 20.7))
        xMLID_82_Path.addCurve(to: CGPoint(x: 35.7, y: 14.7), controlPoint1: CGPoint(x: 24.1, y: 17.7), controlPoint2: CGPoint(x: 30, y: 15.8))
        xMLID_82_Path.close()
        fillColor4.setFill()
        xMLID_82_Path.fill()
        
        context.restoreGState()
        
    }
    
    
    public func droppedMarkerImage(_ color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: CGFloat(169), height: CGFloat(543)), false, 0)
        RCTruck.drawImageWith(color)
        let image: UIImage? = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return image!
    }

    
    
    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
