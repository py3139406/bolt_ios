//
//  RCOnlineDot.swift
//  ProjectName
//
//  Created By Anshul Jain on 25-March-2019
//  Copyright Â© Roadcast Tech Solutions Private Limited
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class RCOnlineDot : NSObject {

    //// Drawing Methods
    
    
    @objc public dynamic class func drawImageWith(_ color:UIColor) -> Void {
        RCOnlineDot.drawDotOnlineCanvas(frame: CGRect.init(x: 0, y: 0, width: 626, height: 626), resizing: .aspectFill, color: color)
    }


    @objc public dynamic class func drawDotOnlineCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 626, height: 626), resizing: ResizingBehavior = .aspectFit, color:UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 626, height: 626), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 626, y: resizedFrame.height / 626)


        //// Color Declarations
        let fillColor = color.withAlphaComponent(0.3)
        let fillColor2 = color

        //// XMLID_2_ Drawing
        let xMLID_2_Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 626, height: 626))
        fillColor.setFill()
        xMLID_2_Path.fill()


        //// XMLID_1_ Drawing
        let xMLID_1_Path = UIBezierPath(ovalIn: CGRect(x: 84, y: 84, width: 458, height: 458))
        fillColor2.setFill()
        xMLID_1_Path.fill()
        
        context.restoreGState()

    }

    
    public func droppedMarkerImage(_ color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: CGFloat(626), height: CGFloat(626)), false, 0)
        RCOnlineDot.drawImageWith(color)
        let image: UIImage? = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        return image!
    }

    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
